NAME: hands-on-dev-env
LAST DEPLOYED: Sun Jan 29 19:21:09 2023
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
auth-server:
  common:
    configmap:
      enabled: false
    global: {}
    image:
      args: []
      pullPolicy: Never
      repository: hands-on
      tag: latest
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /actuator/health/liveness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    livenessProbe_enabled: false
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /actuator/health/readiness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    readinessProbe_enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 350Mi
    service:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: http
      type: ClusterIP
  env:
    SPRING_PROFILES_ACTIVE: docker
  envFromSecretRefs:
  - config-client-credentials
  fullnameOverride: auth-server
  global: {}
  image:
    args: []
    name: auth-server
    pullPolicy: Never
    repository: hands-on
    tag: latest
  livenessProbe_enabled: true
  readinessProbe_enabled: true
common:
  configmap:
    enabled: false
  global: {}
  image:
    args: []
    pullPolicy: Never
    repository: hands-on
    tag: latest
  livenessProbe:
    failureThreshold: 20
    httpGet:
      path: /actuator/health/liveness
      port: 80
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  livenessProbe_enabled: false
  ports:
  - containerPort: 80
    name: http
    protocol: TCP
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /actuator/health/readiness
      port: 80
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbe_enabled: false
  replicaCount: 1
  resources:
    limits:
      memory: 350Mi
  service:
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    type: ClusterIP
config-server:
  common:
    configmap:
      enabled: false
    global: {}
    image:
      args: []
      pullPolicy: Never
      repository: hands-on
      tag: latest
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /actuator/health/liveness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    livenessProbe_enabled: false
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /actuator/health/readiness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    readinessProbe_enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 350Mi
    service:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: http
      type: ClusterIP
  configmap:
    enabled: true
    volumeMounts:
      mountPath: /config-repo
  env:
    SPRING_PROFILES_ACTIVE: docker,native
  envFromSecretRefs:
  - config-server-secrets
  fullnameOverride: config-server
  global: {}
  image:
    args: []
    name: config-server
    pullPolicy: Never
    repository: hands-on
    tag: latest
  livenessProbe:
    failureThreshold: 20
    httpGet:
      path: /actuator/health/liveness
      port: 8888
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  livenessProbe_enabled: true
  ports:
  - containerPort: 8888
    name: http
    protocol: TCP
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /actuator/health/readiness
      port: 8888
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbe_enabled: true
  service:
    ports:
    - name: http
      port: 8888
      protocol: TCP
      targetPort: http
    type: ClusterIP
gateway:
  common:
    configmap:
      enabled: false
    global: {}
    image:
      args: []
      pullPolicy: Never
      repository: hands-on
      tag: latest
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /actuator/health/liveness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    livenessProbe_enabled: false
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /actuator/health/readiness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    readinessProbe_enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 350Mi
    service:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: http
      type: ClusterIP
  env:
    SPRING_PROFILES_ACTIVE: docker
  envFromSecretRefs:
  - config-client-credentials
  fullnameOverride: gateway
  global: {}
  image:
    args: []
    name: gateway
    pullPolicy: Never
    repository: hands-on
    tag: latest
  livenessProbe:
    failureThreshold: 20
    httpGet:
      path: /actuator/health/liveness
      port: 8443
      scheme: HTTPS
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  livenessProbe_enabled: true
  ports:
  - containerPort: 8443
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /actuator/health/readiness
      port: 8443
      scheme: HTTPS
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbe_enabled: true
  service:
    ports:
    - nodePort: 30443
      port: 443
      targetPort: 8443
    type: NodePort
mongodb:
  common:
    configmap:
      enabled: false
    global: {}
    image:
      args: []
      pullPolicy: Never
      repository: hands-on
      tag: latest
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /actuator/health/liveness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    livenessProbe_enabled: false
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /actuator/health/readiness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    readinessProbe_enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 350Mi
    service:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: http
      type: ClusterIP
  fullnameOverride: mongodb
  global: {}
  image:
    args: []
    name: mongo
    pullPolicy: IfNotPresent
    repository: registry.hub.docker.com/library
    tag: 4.4.2
  ports:
  - containerPort: 27017
  service:
    ports:
    - port: 27017
    type: ClusterIP
mysql:
  common:
    configmap:
      enabled: false
    global: {}
    image:
      args: []
      pullPolicy: Never
      repository: hands-on
      tag: latest
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /actuator/health/liveness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    livenessProbe_enabled: false
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /actuator/health/readiness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    readinessProbe_enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 350Mi
    service:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: http
      type: ClusterIP
  env:
    MYSQL_DATABASE: review-db
    MYSQL_PASSWORD: pwd
    MYSQL_ROOT_PASSWORD: rootpwd
    MYSQL_USER: user
  fullnameOverride: mysql
  global: {}
  image:
    args: []
    name: mysql
    pullPolicy: IfNotPresent
    repository: registry.hub.docker.com/library
    tag: 8.0.31
  ports:
  - containerPort: 3306
  resources:
    limits:
      memory: 520Mi
    requests:
      memory: 350Mi
  service:
    ports:
    - port: 3306
    type: ClusterIP
product:
  common:
    configmap:
      enabled: false
    global: {}
    image:
      args: []
      pullPolicy: Never
      repository: hands-on
      tag: latest
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /actuator/health/liveness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    livenessProbe_enabled: false
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /actuator/health/readiness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    readinessProbe_enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 350Mi
    service:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: http
      type: ClusterIP
  env:
    SPRING_PROFILES_ACTIVE: docker
  envFromSecretRefs:
  - config-client-credentials
  fullnameOverride: product
  global: {}
  image:
    args: []
    name: product-service
    pullPolicy: Never
    repository: hands-on
    tag: latest
  livenessProbe_enabled: true
  readinessProbe_enabled: true
product-composite:
  common:
    configmap:
      enabled: false
    global: {}
    image:
      args: []
      pullPolicy: Never
      repository: hands-on
      tag: latest
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /actuator/health/liveness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    livenessProbe_enabled: false
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /actuator/health/readiness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    readinessProbe_enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 350Mi
    service:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: http
      type: ClusterIP
  env:
    SPRING_PROFILES_ACTIVE: docker
  envFromSecretRefs:
  - config-client-credentials
  fullnameOverride: product-composite
  global: {}
  image:
    args: []
    name: product-composite-service
    pullPolicy: Never
    repository: hands-on
    tag: latest
  livenessProbe_enabled: true
  readinessProbe_enabled: true
rabbitmq:
  common:
    configmap:
      enabled: false
    global: {}
    image:
      args: []
      pullPolicy: Never
      repository: hands-on
      tag: latest
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /actuator/health/liveness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    livenessProbe_enabled: false
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /actuator/health/readiness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    readinessProbe_enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 350Mi
    service:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: http
      type: ClusterIP
  fullnameOverride: rabbitmq
  global: {}
  image:
    args: []
    name: rabbitmq
    pullPolicy: IfNotPresent
    repository: registry.hub.docker.com/library
    tag: 3.8.11-management
  ports:
  - containerPort: 5671
  - containerPort: 5672
  - containerPort: 15672
  readinessProbe:
    failureThreshold: 20
    httpGet:
      httpHeaders:
      - name: Authorization
        value: Basic Z3Vlc3Q6Z3Vlc3Q=
      path: /api/aliveness-test/%2F
      port: 15672
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  readinessProbe_enabled: true
  service:
    ports:
    - name: tcp-secure
      port: 5671
    - name: tcp-not-secure
      port: 5672
    - name: http-mgm-ui
      port: 15672
    type: ClusterIP
recommendation:
  common:
    configmap:
      enabled: false
    global: {}
    image:
      args: []
      pullPolicy: Never
      repository: hands-on
      tag: latest
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /actuator/health/liveness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    livenessProbe_enabled: false
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /actuator/health/readiness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    readinessProbe_enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 350Mi
    service:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: http
      type: ClusterIP
  env:
    SPRING_PROFILES_ACTIVE: docker
  envFromSecretRefs:
  - config-client-credentials
  fullnameOverride: recommendation
  global: {}
  image:
    args: []
    name: recommendation-service
    pullPolicy: Never
    repository: hands-on
    tag: latest
  livenessProbe_enabled: true
  readinessProbe_enabled: true
review:
  common:
    configmap:
      enabled: false
    global: {}
    image:
      args: []
      pullPolicy: Never
      repository: hands-on
      tag: latest
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /actuator/health/liveness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    livenessProbe_enabled: false
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /actuator/health/readiness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    readinessProbe_enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 350Mi
    service:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: http
      type: ClusterIP
  env:
    SPRING_PROFILES_ACTIVE: docker
  envFromSecretRefs:
  - config-client-credentials
  fullnameOverride: review
  global: {}
  image:
    args: []
    name: review-service
    pullPolicy: Never
    repository: hands-on
    tag: latest
  livenessProbe_enabled: true
  readinessProbe_enabled: true
secrets:
  config-client-credentials:
    CONFIG_SERVER_PWD: dev-pwd
    CONFIG_SERVER_USR: dev-usr
  config-server-secrets:
    ENCRYPT_KEY: my-very-secure-encrypt-key
    SPRING_SECURITY_USER_NAME: dev-usr
    SPRING_SECURITY_USER_PASSWORD: dev-pwd
zipkin-server:
  common:
    configmap:
      enabled: false
    global: {}
    image:
      args: []
      pullPolicy: Never
      repository: hands-on
      tag: latest
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /actuator/health/liveness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    livenessProbe_enabled: false
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /actuator/health/readiness
        port: 80
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    readinessProbe_enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 350Mi
    service:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: http
      type: ClusterIP
  env:
    RABBIT_ADDRESSES: rabbitmq
    STORAGE_TYPE: mem
  fullnameOverride: zipkin-server
  global: {}
  image:
    args: []
    name: zipkin
    pullPolicy: IfNotPresent
    repository: registry.hub.docker.com/openzipkin
    tag: 2.23.2
  livenessProbe:
    failureThreshold: 20
    httpGet:
      path: /actuator/info
      port: 9411
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  livenessProbe_enabled: true
  ports:
  - containerPort: 9411
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /actuator/health
      port: 9411
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbe_enabled: true
  resources:
    limits:
      memory: 512Mi
  service:
    ports:
    - port: 9411
    type: ClusterIP

HOOKS:
MANIFEST:
---
# Source: dev-env/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: config-client-credentials
  labels:
    app.kubernetes.io/name: config-client-credentials
    helm.sh/chart: dev-env-1.0.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  CONFIG_SERVER_PWD: ZGV2LXB3ZA==
  CONFIG_SERVER_USR: ZGV2LXVzcg==
---
# Source: dev-env/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: config-server-secrets
  labels:
    app.kubernetes.io/name: config-server-secrets
    helm.sh/chart: dev-env-1.0.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  ENCRYPT_KEY: bXktdmVyeS1zZWN1cmUtZW5jcnlwdC1rZXk=
  SPRING_SECURITY_USER_NAME: ZGV2LXVzcg==
  SPRING_SECURITY_USER_PASSWORD: ZGV2LXB3ZA==
---
# Source: dev-env/charts/config-server/templates/configmap_from_file.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-server
  labels:
    app.kubernetes.io/name: config-server
    helm.sh/chart: config-server-1.0.0
    app.kubernetes.io/managed-by: Helm
data:
  application.yml: |-
    app:
      auth-server: localhost
  
    spring.rabbitmq:
      host: 127.0.0.1
      port: 5672
      username: guest
      password: '{cipher}17fcf0ae5b8c5cf87de6875b699be4a1746dd493a99d926c7a26a68c422117ef'
  
    spring.cloud.stream.kafka.binder:
      brokers: 127.0.0.1
      defaultBrokerPort: 9092
  
    spring.cloud.stream.defaultBinder: rabbit
    spring.zipkin.sender.type: rabbit
    spring.sleuth.sampler.probability: 1.0
  
    # WARNING: Exposing all management endpoints over http should only be used during development, must be locked down in production!
    management.endpoint.health.show-details: "ALWAYS"
    management.endpoints.web.exposure.include: "*"
    management.endpoint.health.probes.enabled: true
    management.endpoint.health.group.readiness.include: rabbit, db, mongo
  
    server.shutdown: graceful
    spring.lifecycle.timeout-per-shutdown-phase: 10s
  
    ---
    spring.config.activate.on-profile: docker
  
    spring.rabbitmq.host: rabbitmq
  
    spring.cloud.stream.kafka.binder.brokers: kafka
  
    app:
      auth-server: auth-server
  
    ---
    spring.config.activate.on-profile: kafka
  
    management.health.rabbit.enabled: false
    spring.cloud.stream.defaultBinder: kafka
    spring.kafka.bootstrap-servers: kafka:9092
    spring.cloud.stream.kafka.binder.replication-factor: 1
    spring.zipkin.sender.type: kafka
  
    ---
    spring.config.activate.on-profile: prod
    spring.rabbitmq.host: 172.17.0.1
  
    # Only allow management endpoints over http in production for info, health and circuitbreakerevents
    management.endpoints.web.exposure.include: health,info,circuitbreakerevents
  auth-server.yml: |-
    server.port: 9999
    server.forward-headers-strategy: framework
  
    logging:
      level:
        root: INFO
  
    ---
    spring.config.activate.on-profile: docker
  
    server.port: 80
  
    ---
    spring.config.activate.on-profile: prod
  
    logging.level.root: WARN
  gateway.yml: |
    server.port: 8443
  
    server.ssl:
      key-store-type: PKCS12
      key-store: classpath:keystore/edge.p12
      key-store-password: '{cipher}d59274473b196cebe288f849c442eba34aa497d14a13e10a23f824489e1c23ec'
      key-alias: localhost
  
    spring.cloud.gateway.routes:
  
    - id: product-composite
      uri: http://product-composite
      predicates:
      - Path=/product-composite/**
  
    - id: oauth2-server
      uri: http://${app.auth-server}
      predicates:
      - Path=/oauth2/**
  
    - id: oauth2-login
      uri: http://${app.auth-server}
      predicates:
      - Path=/login/**
  
    - id: oauth2-error
      uri: http://${app.auth-server}
      predicates:
      - Path=/error/**
  
    - id: product-composite-swagger-ui
      uri: http://product-composite
      predicates:
      - Path=/openapi/**
  
    - id: product-composite-swagger-ui-webjars
      uri: http://product-composite
      predicates:
      - Path=/webjars/**
  
    - id: config-server
      uri: ${spring.cloud.config.uri}
      predicates:
      - Path=/config/**
      filters:
      - RewritePath=/config/(?<segment>.*), /$\{segment}
  
    spring.security.oauth2.resourceserver.jwt.issuer-uri: http://${app.auth-server}
  
    spring.sleuth.reactor.instrumentation-type: decorate-on-last
  
    logging:
      level:
        root: INFO
        org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: INFO
        org.springframework.cloud.gateway: TRACE
        org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE
  
    ---
    spring.config.activate.on-profile: prod
  
    logging:
      level:
        root: WARN
        org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: WARN
        org.springframework.cloud.gateway: WARN
        org.springframework.web.server.adapter.HttpWebHandlerAdapter: WARN
  product-composite.yml: |-
    springdoc:
      swagger-ui.path: /openapi/swagger-ui.html
      api-docs.path: /openapi/v3/api-docs
      packagesToScan: se.magnus.microservices.composite.product
      pathsToMatch: /**
      cache.disabled: true
  
      swagger-ui:
        oauth2-redirect-url: https://localhost:8443/webjars/swagger-ui/oauth2-redirect.html
        oauth:
          clientId: writer
          clientSecret: '{cipher}4ec25f436feb83f24d23a89f70b5bc374d4afac0b4693bd9fe527183d1f83893'
          useBasicAuthenticationWithAccessCodeGrant: true
      oAuthFlow:
        authorizationUrl: https://localhost:8443/oauth2/authorize
        tokenUrl: https://localhost:8443/oauth2/token
  
    server.forward-headers-strategy: framework
  
    api:
  
      common:
        version: 1.0.0
        title: Sample API
        description: Description of the API...
        termsOfService: MY TERMS OF SERVICE
        license: MY LICENSE
        licenseUrl: MY LICENSE URL
  
        externalDocDesc: MY WIKI PAGE
        externalDocUrl: MY WIKI URL
        contact:
          name: NAME OF CONTACT
          url: URL TO CONTACT
          email: contact@mail.com
  
      responseCodes:
        ok.description: OK
        badRequest.description: Bad Request, invalid format of the request. See response message for more information
        notFound.description: Not found, the specified id does not exist
        unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information
  
      product-composite:
  
        get-composite-product:
          description: Returns a composite view of the specified product id
          notes: |
            # Normal response
            If the requested product id is found the method will return information regarding:
            1. Product information
            1. Reviews
            1. Recommendations
            1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
  
            # Expected partial and error responses
            1. If no product information is found, a **404 - Not Found** error will be returned
            1. In no recommendations or reviews are found for a product, a partial response will be returned
  
        create-composite-product:
          description: Creates a composite product
          notes: |
            # Normal response
            The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities.
  
            # Expected error responses
            1. If a product with the same productId as specified in the posted information already exists,
               an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned
  
        delete-composite-product:
          description: Deletes a product composite
          notes: |
            # Normal response
            Entities for product information, recommendations and reviews related to the specified productId will be deleted.
            The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
  
            This means that a delete request of a non-existing product will return **200 Ok**.
  
    server.port: 7000
    server.error.include-message: always
  
    spring.cloud.stream:
      default.contentType: application/json
      bindings:
        products-out-0:
          destination: products
          producer:
            required-groups: auditGroup
        recommendations-out-0:
          destination: recommendations
          producer:
            required-groups: auditGroup
        reviews-out-0:
          destination: reviews
          producer:
            required-groups: auditGroup
  
    spring.security.oauth2.resourceserver.jwt.issuer-uri: http://${app.auth-server}
  
    resilience4j.timelimiter:
      instances:
        product:
          timeoutDuration: 2s
  
    resilience4j.retry:
      instances:
        product:
          maxAttempts: 3
          waitDuration: 1000
          retryExceptions:
          - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError
  
    management.health.circuitbreakers.enabled: true
  
    resilience4j.circuitbreaker:
      instances:
        product:
          allowHealthIndicatorToFail: false
          registerHealthIndicator: true
          slidingWindowType: COUNT_BASED
          slidingWindowSize: 5
          failureRateThreshold: 50
          waitDurationInOpenState: 10000
          permittedNumberOfCallsInHalfOpenState: 3
          automaticTransitionFromOpenToHalfOpenEnabled: true
          ignoreExceptions:
            - se.magnus.api.exceptions.InvalidInputException
            - se.magnus.api.exceptions.NotFoundException
  
    logging:
      level:
        root: INFO
        se.magnus: DEBUG
        org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE
  
    ---
    spring.config.activate.on-profile: docker
  
    server.port: 80
  
    ---
    spring.config.activate.on-profile: streaming_partitioned
  
    spring.cloud.stream.bindings.products-out-0.producer:
      partition-key-expression: headers['partitionKey']
      partition-count: 2
  
    spring.cloud.stream.bindings.recommendations-out-0.producer:
      partition-key-expression: headers['partitionKey']
      partition-count: 2
  
    spring.cloud.stream.bindings.reviews-out-0.producer:
      partition-key-expression: headers['partitionKey']
      partition-count: 2
  
    ---
    spring.config.activate.on-profile: prod
  
    logging:
      level:
        root: WARN
        se.magnus: WARN
        org.springframework.web.server.adapter.HttpWebHandlerAdapter: WARN
  product.yml: |-
    server.port: 7001
    server.error.include-message: always
  
    spring.data.mongodb:
      host: localhost
      port: 27017
      database: product-db
  
    spring.cloud.function.definition: messageProcessor
  
    spring.cloud.stream:
      default.contentType: application/json
      bindings.messageProcessor-in-0:
        destination: products
        group: productsGroup
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
      maxAttempts: 3
      backOffInitialInterval: 500
      backOffMaxInterval: 1000
      backOffMultiplier: 2.0
  
    spring.cloud.stream.rabbit.bindings.messageProcessor-in-0.consumer:
      autoBindDlq: true
      republishToDlq: true
  
    spring.cloud.stream.kafka.bindings.messageProcessor-in-0.consumer:
      enableDlq: true
  
    logging:
      level:
        root: INFO
        se.magnus: DEBUG
        org.springframework.data.mongodb.core.ReactiveMongoTemplate: DEBUG
  
    ---
    spring.config.activate.on-profile: docker
  
    server.port: 80
  
    spring.data.mongodb.host: mongodb
  
    ---
    spring.config.activate.on-profile: streaming_partitioned
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
      partitioned: true
      instanceCount: 2
  
    ---
    spring.config.activate.on-profile: streaming_instance_0
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 0
  
    ---
    spring.config.activate.on-profile: streaming_instance_1
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 1
  
    ---
    spring.config.activate.on-profile: prod
  
    spring.data.mongodb.host: 172.17.0.1
  
    logging:
      level:
        root: WARN
        se.magnus: WARN
        org.springframework.data.mongodb.core.MongoTemplate: WARN
  recommendation.yml: |-
    server.port: 7002
    server.error.include-message: always
  
    spring.data.mongodb:
      host: localhost
      port: 27017
      database: recommendation-db
  
    spring.cloud.function.definition: messageProcessor
  
    spring.cloud.stream:
      default.contentType: application/json
      bindings.messageProcessor-in-0:
        destination: recommendations
        group: recommendationsGroup
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
      maxAttempts: 3
      backOffInitialInterval: 500
      backOffMaxInterval: 1000
      backOffMultiplier: 2.0
  
    spring.cloud.stream.rabbit.bindings.messageProcessor-in-0.consumer:
      autoBindDlq: true
      republishToDlq: true
  
    spring.cloud.stream.kafka.bindings.messageProcessor-in-0.consumer:
      enableDlq: true
  
    logging:
      level:
        root: INFO
        se.magnus: DEBUG
        org.springframework.data.mongodb.core.ReactiveMongoTemplate: DEBUG
  
    ---
    spring.config.activate.on-profile: docker
  
    server.port: 80
  
    spring.data.mongodb.host: mongodb
  
    ---
    spring.config.activate.on-profile: streaming_partitioned
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
      partitioned: true
      instanceCount: 2
  
    ---
    spring.config.activate.on-profile: streaming_instance_0
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 0
  
    ---
    spring.config.activate.on-profile: streaming_instance_1
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 1
  
    ---
    spring.config.activate.on-profile: prod
  
    spring.data.mongodb.host: 172.17.0.1
  
    logging:
      level:
        root: WARN
        se.magnus: WARN
        org.springframework.data.mongodb.core.MongoTemplate: WARN
  review.yml: |
    server.port: 7003
    server.error.include-message: always
  
    # Strongly recommend to set this property to "none" in a production environment!
    spring.jpa.hibernate.ddl-auto: update
  
    spring.datasource:
      url: jdbc:mysql://localhost/review-db
      username: user
      password: '{cipher}24b93c790fa2ed0dc5a6a2b8c39853cf4d6cd6100c248de5f279fb5dd78e7be6'
  
    spring.datasource.hikari.initializationFailTimeout: 60000
  
    spring.cloud.function.definition: messageProcessor
  
    spring.cloud.stream:
      default.contentType: application/json
      bindings.messageProcessor-in-0:
        destination: reviews
        group: reviewsGroup
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
      maxAttempts: 3
      backOffInitialInterval: 500
      backOffMaxInterval: 1000
      backOffMultiplier: 2.0
  
    spring.cloud.stream.rabbit.bindings.messageProcessor-in-0.consumer:
      autoBindDlq: true
      republishToDlq: true
  
    spring.cloud.stream.kafka.bindings.messageProcessor-in-0.consumer:
      enableDlq: true
  
    logging:
      level:
        root: INFO
        se.magnus: DEBUG
        org.hibernate.SQL: DEBUG
        org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  
    ---
    spring.config.activate.on-profile: docker
  
    server.port: 80
  
    spring.datasource.url: jdbc:mysql://mysql/review-db
  
    ---
    spring.config.activate.on-profile: streaming_partitioned
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
      partitioned: true
      instanceCount: 2
  
    ---
    spring.config.activate.on-profile: streaming_instance_0
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 0
  
    ---
    spring.config.activate.on-profile: streaming_instance_1
  
    spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 1
  
    ---
    spring.config.activate.on-profile: prod
  
    spring.datasource.url: jdbc:mysql://172.17.0.1:3306/review-db
  
    logging:
      level:
        root: WARN
        se.magnus: WARN
        org.hibernate.SQL: WARN
        org.hibernate.type.descriptor.sql.BasicBinder: WARN
---
# Source: dev-env/charts/auth-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: auth-server
  labels:
    app.kubernetes.io/name: auth-server
    helm.sh/chart: auth-server-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: auth-server
---
# Source: dev-env/charts/config-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: config-server
  labels:
    app.kubernetes.io/name: config-server
    helm.sh/chart: config-server-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8888
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: config-server
---
# Source: dev-env/charts/gateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gateway
  labels:
    app.kubernetes.io/name: gateway
    helm.sh/chart: gateway-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - nodePort: 30443
      port: 443
      targetPort: 8443
  selector:
    app.kubernetes.io/name: gateway
---
# Source: dev-env/charts/mongodb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 27017
  selector:
    app.kubernetes.io/name: mongodb
---
# Source: dev-env/charts/mysql/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3306
  selector:
    app.kubernetes.io/name: mysql
---
# Source: dev-env/charts/product-composite/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: product-composite
  labels:
    app.kubernetes.io/name: product-composite
    helm.sh/chart: product-composite-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: product-composite
---
# Source: dev-env/charts/product/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: product
  labels:
    app.kubernetes.io/name: product
    helm.sh/chart: product-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: product
---
# Source: dev-env/charts/rabbitmq/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: tcp-secure
      port: 5671
    - name: tcp-not-secure
      port: 5672
    - name: http-mgm-ui
      port: 15672
  selector:
    app.kubernetes.io/name: rabbitmq
---
# Source: dev-env/charts/recommendation/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: recommendation
  labels:
    app.kubernetes.io/name: recommendation
    helm.sh/chart: recommendation-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: recommendation
---
# Source: dev-env/charts/review/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: review
  labels:
    app.kubernetes.io/name: review
    helm.sh/chart: review-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: review
---
# Source: dev-env/charts/zipkin-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: zipkin-server
  labels:
    app.kubernetes.io/name: zipkin-server
    helm.sh/chart: zipkin-server-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9411
  selector:
    app.kubernetes.io/name: zipkin-server
---
# Source: dev-env/charts/auth-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-server
  labels:
    app.kubernetes.io/name: auth-server
    helm.sh/chart: auth-server-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: auth-server
    spec:
      containers:
        - name: auth-server
          image: "hands-on/auth-server:latest"
          imagePullPolicy: Never
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          envFrom:
          - secretRef:
              name: config-client-credentials
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/health/liveness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          resources:
            limits:
              memory: 350Mi
---
# Source: dev-env/charts/config-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: config-server
  labels:
    app.kubernetes.io/name: config-server
    helm.sh/chart: config-server-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: config-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: config-server
    spec:
      containers:
        - name: config-server
          image: "hands-on/config-server:latest"
          imagePullPolicy: Never
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: docker,native
          envFrom:
          - secretRef:
              name: config-server-secrets
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/health/liveness
              port: 8888
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: 8888
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 8888
              name: http
              protocol: TCP
          resources:
            limits:
              memory: 350Mi
          volumeMounts:
          - name: config-server
            mountPath: /config-repo
      volumes:
        - name: config-server
          configMap:
            name: config-server
---
# Source: dev-env/charts/gateway/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  labels:
    app.kubernetes.io/name: gateway
    helm.sh/chart: gateway-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gateway
    spec:
      containers:
        - name: gateway
          image: "hands-on/gateway:latest"
          imagePullPolicy: Never
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          envFrom:
          - secretRef:
              name: config-client-credentials
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/health/liveness
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 8443
          resources:
            limits:
              memory: 350Mi
---
# Source: dev-env/charts/mongodb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
    spec:
      containers:
        - name: mongodb
          image: "registry.hub.docker.com/library/mongo:4.4.2"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 27017
          resources:
            limits:
              memory: 350Mi
---
# Source: dev-env/charts/mysql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
    spec:
      containers:
        - name: mysql
          image: "registry.hub.docker.com/library/mysql:8.0.31"
          imagePullPolicy: IfNotPresent
          env:
          - name: MYSQL_DATABASE
            value: review-db
          - name: MYSQL_PASSWORD
            value: pwd
          - name: MYSQL_ROOT_PASSWORD
            value: rootpwd
          - name: MYSQL_USER
            value: user
          ports:
            - containerPort: 3306
          resources:
            limits:
              memory: 520Mi
            requests:
              memory: 350Mi
---
# Source: dev-env/charts/product-composite/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-composite
  labels:
    app.kubernetes.io/name: product-composite
    helm.sh/chart: product-composite-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: product-composite
  template:
    metadata:
      labels:
        app.kubernetes.io/name: product-composite
    spec:
      containers:
        - name: product-composite
          image: "hands-on/product-composite-service:latest"
          imagePullPolicy: Never
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          envFrom:
          - secretRef:
              name: config-client-credentials
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/health/liveness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          resources:
            limits:
              memory: 350Mi
---
# Source: dev-env/charts/product/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product
  labels:
    app.kubernetes.io/name: product
    helm.sh/chart: product-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: product
  template:
    metadata:
      labels:
        app.kubernetes.io/name: product
    spec:
      containers:
        - name: product
          image: "hands-on/product-service:latest"
          imagePullPolicy: Never
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          envFrom:
          - secretRef:
              name: config-client-credentials
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/health/liveness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          resources:
            limits:
              memory: 350Mi
---
# Source: dev-env/charts/rabbitmq/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: "registry.hub.docker.com/library/rabbitmq:3.8.11-management"
          imagePullPolicy: IfNotPresent
          readinessProbe:
            failureThreshold: 20
            httpGet:
              httpHeaders:
              - name: Authorization
                value: Basic Z3Vlc3Q6Z3Vlc3Q=
              path: /api/aliveness-test/%2F
              port: 15672
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          ports:
            - containerPort: 5671
            - containerPort: 5672
            - containerPort: 15672
          resources:
            limits:
              memory: 350Mi
---
# Source: dev-env/charts/recommendation/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendation
  labels:
    app.kubernetes.io/name: recommendation
    helm.sh/chart: recommendation-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: recommendation
  template:
    metadata:
      labels:
        app.kubernetes.io/name: recommendation
    spec:
      containers:
        - name: recommendation
          image: "hands-on/recommendation-service:latest"
          imagePullPolicy: Never
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          envFrom:
          - secretRef:
              name: config-client-credentials
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/health/liveness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          resources:
            limits:
              memory: 350Mi
---
# Source: dev-env/charts/review/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: review
  labels:
    app.kubernetes.io/name: review
    helm.sh/chart: review-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: review
  template:
    metadata:
      labels:
        app.kubernetes.io/name: review
    spec:
      containers:
        - name: review
          image: "hands-on/review-service:latest"
          imagePullPolicy: Never
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          envFrom:
          - secretRef:
              name: config-client-credentials
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/health/liveness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          resources:
            limits:
              memory: 350Mi
---
# Source: dev-env/charts/zipkin-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin-server
  labels:
    app.kubernetes.io/name: zipkin-server
    helm.sh/chart: zipkin-server-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zipkin-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zipkin-server
    spec:
      containers:
        - name: zipkin-server
          image: "registry.hub.docker.com/openzipkin/zipkin:2.23.2"
          imagePullPolicy: IfNotPresent
          env:
          - name: RABBIT_ADDRESSES
            value: rabbitmq
          - name: STORAGE_TYPE
            value: mem
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/info
              port: 9411
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 9411
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 9411
          resources:
            limits:
              memory: 512Mi

